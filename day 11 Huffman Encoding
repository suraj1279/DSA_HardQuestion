//{ Driver Code Starts
//Initial Template for Java


import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
	public static void main(String[] args) throws IOException
	{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t-->0)
        {
            String S = br.readLine().trim();
            int N = S.length();
            Solution ob = new Solution();
            String[] element = br.readLine().trim().split("\\s+");
		    int[] f = new int[N];
		    for(int i = 0; i < N; i++){
		        f[i] = Integer.parseInt(element[i]);
		    }
            ArrayList<String> res  = ob.huffmanCodes(S,f,N);
            for(int i = 0; i < res.size(); i++)
            {
                System.out.print(res.get(i)+" ");
            }
            System.out.println();
        }
	}
}
// } Driver Code Ends


//User function Template for Java
--------------------------------------------------------------Code------------------------------------------------------------
class Solution {
    class Node implements Comparable<Node>{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
            this.left = null;
            this.right = null;
        }
        public int compareTo(Node temp){
            if(this.data == temp.data){
                return 1;
            }
            return this.data - temp.data;
        }
    }
    public void preorder(Node root, String str, ArrayList<String> res){
        if(root.left == null && root.right == null){
            res.add(str);
            return;
        }
        preorder(root.left, str + "0", res);
        preorder(root.right, str + "1", res);
        
    }
    public ArrayList<String> huffmanCodes(String S, int f[], int N)
    {
        ArrayList<String> res = new ArrayList<>();
        PriorityQueue<Node> pq = new PriorityQueue<>();
        for(int ele: f){
            Node temp = new Node(ele);
            pq.add(temp);
        }
        while(pq.size() > 1){
            Node left = pq.poll();
            Node right = pq.poll();
            Node parent = new Node(left.data + right.data);
            parent.left = left;
            parent.right = right;
            pq.add(parent);
        }
        Node root = pq.poll();
        preorder(root, "", res);
        return res;
    }
}
